    // const SESSION_KEY = "wg_session_wallet"
    // const session     = new sess.Storage({ area: "session" })
    //
    // // a writable store that will mirror chrome.storage.session
    // export const walletStore = writable<Keypair | null>(null)
    //
    // // 1. load current value
    // session.get<string>(SESSION_KEY).then((raw) => {
    //     if (raw) walletStore.set(Keypair.fromSecretKey(bs58.decode(raw)))
    // })
    //
    // // 2. listen for changes (e.g. background â–¸ popup)
    // session.watch({
    //     [SESSION_KEY]: ({ newValue }) => {
    //         walletStore.set(
    //           newValue ? Keypair.fromSecretKey(bs58.decode(newValue)) : null
    //         )
    //     }
    // })
    // /* ------------------------------------------------ */
    //
    // // local UI state
    // let showQr = false



    // let loggedIn = false;
    // let changed = false;
    // // $: {
    // //     console.log('logged is now', loggedIn);
    // //     // if (loggedIn) {
    // //     //     // do whatever needs the user to be logged in
    // //     //     startPollingUserData();
    // //     // } else {
    // //     //     stopPollingUserData();
    // //     // }
    // // }
    // let showQr = false
    //
    // // const handleSuccess = () => {
    // //     logged = true;
    // //     alert('success')
    // // };

    // onMount(async () => {
    //     await session.get<string>(SESSION_KEY).then((raw) => {
    //         if (raw) walletStore.set(Keypair.fromSecretKey(bs58.decode(raw)))
    //     })
    //
    //     walletStore.subscribe(async (kp) => {
    //         console.log("kp: " + JSON.stringify(kp));
    //
    //         if (kp) await session.set(SESSION_KEY, bs58.encode(kp.secretKey))
    //         else    await session.remove(SESSION_KEY)
    //     });
    // })