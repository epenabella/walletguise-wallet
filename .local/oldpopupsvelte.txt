    // const SESSION_KEY = "wg_session_wallet"
    // const session     = new sess.Storage({ area: "session" })
    //
    // // a writable store that will mirror chrome.storage.session
    // export const walletStore = writable<Keypair | null>(null)
    //
    // // 1. load current value
    // session.get<string>(SESSION_KEY).then((raw) => {
    //     if (raw) walletStore.set(Keypair.fromSecretKey(bs58.decode(raw)))
    // })
    //
    // // 2. listen for changes (e.g. background ▸ popup)
    // session.watch({
    //     [SESSION_KEY]: ({ newValue }) => {
    //         walletStore.set(
    //           newValue ? Keypair.fromSecretKey(bs58.decode(newValue)) : null
    //         )
    //     }
    // })
    // /* ------------------------------------------------ */
    //
    // // local UI state
    // let showQr = false



    //session obj:
    // {"wg_session_wallet":"XqXHArJz95D8Vi36LUiFSkxRMnR5MiuEV4XuUmGZhkLCwy9CoN8PKMjVHRVGm4jVQC5mi7kUqjVpDZW58RDUQbx"}



    // chrome.storage.local.get(null, items => {
    //     Object.keys(items).forEach(key => {
    //         console.log(`${key}: ${items[key]}`);
    //         const maybeHashKey = key.split('|').at(-1);
    //         if (maybeHashKey !== STORAGE_KEYS.HASH) return;
    //         const walletKey = key.replace(STORAGE_KEYS.HASH, STORAGE_KEYS.ENC_WALLET);
    //         const enc = items[walletKey];
    //
    //         console.log(`try restore enc:\n${enc}`)
    //
    //         kp = Keypair.fromSecretKey(bs58.decode(enc));
    //
    //         if (kp) {
    //             console.log('restored on outset')
    //         }
    //     })
    // })




    // secureStore.watch({
    //     "walletguise_encrypted_wallet": (a,b) => {
    //         try {
    //             console.debug('secure watch:' + JSON.stringify(b))
    //             alert('kp watch: ' + kp.publicKey)
    //             secureStore.get<string>(STORAGE_KEYS.ENC_WALLET).then(enc => {
    //                 kp = enc ? Keypair.fromSecretKey(bs58.decode(enc)) : null
    //             })   // auto-decrypts
    //
    //         } catch {
    //             // happens if setPassword() has not been called yet
    //             kp = null
    //         }
    //     }
    // })
    /* ---------------------------------------------------------- */

    /** called by Login.svelte once it has a decrypted Keypair */
    // async function setKeypair(k: Keypair) {
    //     kp = k
    //     await secureStore.set(ENC_WALLET, bs58.encode(k.secretKey))       // encrypt + store
    // }



    // secureStore.get<string>(STORAGE_KEYS.HASH).then(async h => {
    //     console.log('h: ' + h);
    //     if (h) {
    //         const enc = await secureStore.get<string>(STORAGE_KEYS.ENC_WALLET)
    //         kp = Keypair.fromSecretKey(bs58.decode(enc))
    //
    //         if (kp) {
    //             console.log('has wallet get popup: ' + kp.publicKey);
    //         }
    //     }
    // });

    /* live listener – fires in every popup when ENC_WALLET changes */


    // let loggedIn = false;
    // let changed = false;
    // // $: {
    // //     console.log('logged is now', loggedIn);
    // //     // if (loggedIn) {
    // //     //     // do whatever needs the user to be logged in
    // //     //     startPollingUserData();
    // //     // } else {
    // //     //     stopPollingUserData();
    // //     // }
    // // }
    // let showQr = false
    //
    // // const handleSuccess = () => {
    // //     logged = true;
    // //     alert('success')
    // // };

    // onMount(async () => {
    //     await session.get<string>(SESSION_KEY).then((raw) => {
    //         if (raw) walletStore.set(Keypair.fromSecretKey(bs58.decode(raw)))
    //     })
    //
    //     walletStore.subscribe(async (kp) => {
    //         console.log("kp: " + JSON.stringify(kp));
    //
    //         if (kp) await session.set(SESSION_KEY, bs58.encode(kp.secretKey))
    //         else    await session.remove(SESSION_KEY)
    //     });
    // })